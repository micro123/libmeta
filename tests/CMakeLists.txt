file(GLOB_RECURSE CATCH2_SRC catch2/*.*)
add_library(Catch2 STATIC ${CATCH2_SRC})
target_include_directories(Catch2 PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/catch2)
set_property(TARGET Catch2 PROPERTY FOLDER "Unit Tests/Lib")

# function(dump_cmake_variables)
#   get_cmake_property(_variableNames VARIABLES)
#   list (SORT _variableNames)
#   foreach (_variableName ${_variableNames})
#     if ((NOT DEFINED ARGV0) OR _variableName MATCHES ${ARGV0})
#       message(STATUS "==> ${_variableName}=${${_variableName}}")
#     endif()
#   endforeach()
# endfunction()

function(AddTest)
  set(options)
  set(oneValueArgs NAME)
  set(multiValueArgs SRC LINK)
  cmake_parse_arguments(arg_add_test "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  set(name ${arg_add_test_NAME}_test)
  add_executable(${name} ${arg_add_test_SRC})
  target_link_libraries(${name} PRIVATE Catch2 ${arg_add_test_LINK})
  add_test(NAME ${arg_add_test_NAME} COMMAND ${name})
  set_target_properties(
    ${name} PROPERTIES
    FOLDER "Unit Tests"
  )
endfunction()

macro(single_file_test name)
  AddTest(NAME ${name} SRC ${name}_test.cpp LINK libmeta libmeta_headers)
endmacro()

single_file_test(foo)
single_file_test(constexpr)
single_file_test(typeid)
single_file_test(registry)
single_file_test(ref)
single_file_test(field)
single_file_test(method)
single_file_test(any)
single_file_test(builder)
single_file_test(string_name)
single_file_test(serialize)
