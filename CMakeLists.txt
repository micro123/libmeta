cmake_minimum_required(VERSION 3.23)

project(libmeta CXX)

set(USE_FOLDERS ON)
set(CMAKE_VERBOSE_MAKEFILE ON)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)

if (${CMAKE_SOURCE_DIR} EQUAL ${CMAKE_CURRENT_SOURCE_DIR})
  set(LIBMETA_IS_ROOT_PROJECT ON)
else()
  set(LIBMETA_IS_ROOT_PROJECT OFF)
endif()
option(BUILD_TESTS "build unit tests" ${LIBMETA_IS_ROOT_PROJECT})

if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
  message(STATUS "using clang compiler")
  add_compile_options(-fvisibility=hidden)
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  message(STATUS "using GCC compiler")
  add_compile_options(-fvisibility=hidden)
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
  message(STATUS "using MSVC compiler")
  add_compile_options(/utf-8)
endif()

function(dump_cmake_variables match)
  message(STATUS "==> dump_cmake_variables start")
  get_cmake_property(_variableNames VARIABLES)
  list (SORT _variableNames)
  foreach (_variableName ${_variableNames})
    if (${match} EQUAL "")
      message(STATUS "==> ${_variableName}=${${_variableName}}")
    elseif (_variableName MATCHES ${match})
      message(STATUS "==> ${_variableName}=${${_variableName}}")
    endif()
  endforeach()
  message(STATUS "==> dump_cmake_variables end")
endfunction()

add_library(libmeta_headers INTERFACE)
target_include_directories(libmeta_headers INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/include)

add_subdirectory(src)
add_subdirectory(tools)

add_subdirectory(example)

if (BUILD_TESTS)
  enable_testing()
  add_subdirectory(tests)
endif ()